/*
 * Copyright (c) 2014, Kevin LÃ¤ufer
 * Copyright (c) 2014-2017, Niklas Hauser
 * Copyright (c) 2020, Mike Wolfram
 * Copyright (c) 2021, Raphael Lehmann
 * Copyright (c) 2021, Christopher Durand
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_DMA_BASE_HPP
#define MODM_STM32_DMA_BASE_HPP

#include <stdint.h>
#include <cstddef>

#include "../device.hpp"

#include <modm/architecture/interface/assert.hpp>
#include <modm/architecture/interface/interrupt.hpp>
#include <modm/architecture/interface/register.hpp>

%% if target["family"] == "f4"
	%% set reg_prefix = "DMA_SxCR"
%% elif dmaType in ["stm32-channel-request", "stm32-channel", "stm32-mux"]
	%% set reg_prefix = "DMA_CCR"
%% endif

namespace modm
{

namespace platform
{
/**
 * DMA
 *
 * @author	Kevin Laeufer
 * @author	Mike Wolfram
 * @ingroup	modm_platform_dma
 */
class DmaBase
{
public:
	// Enums
%% if target["family"] == "f4"
	enum class
	Channel : uint32_t
	{
		Channel0 = 0,
		Channel1 = DMA_SxCR_CHSEL_0,
		Channel2 = DMA_SxCR_CHSEL_1,
		Channel3 = DMA_SxCR_CHSEL_1 | DMA_SxCR_CHSEL_0,
		Channel4 = DMA_SxCR_CHSEL_2,
		Channel5 = DMA_SxCR_CHSEL_2 | DMA_SxCR_CHSEL_0,
		Channel6 = DMA_SxCR_CHSEL_2 | DMA_SxCR_CHSEL_1,
		Channel7 = DMA_SxCR_CHSEL_2 | DMA_SxCR_CHSEL_1 | DMA_SxCR_CHSEL_0,
	};

	enum class
	MemoryBurstTransfer : uint32_t
	{
		Single 		= 0,
		Increment4 	= DMA_SxCR_MBURST_0,
		Increment8 	= DMA_SxCR_MBURST_1,
		Increment16 = DMA_SxCR_MBURST_1 | DMA_SxCR_MBURST_0,
	};

	enum class
	PeripheralBurstTransfer : uint32_t
	{
		Single 		= 0,
		Increment4 	= DMA_SxCR_PBURST_0,
		Increment8 	= DMA_SxCR_PBURST_1,
		Increment16 = DMA_SxCR_PBURST_1 | DMA_SxCR_PBURST_0,
	};

	enum class
	FlowControl : uint32_t
	{
		Dma 		= 0,
		Peripheral 	= DMA_SxCR_PFCTRL, ///< the peripheral is the flow controller
	};
%% elif dmaType in ["stm32-channel-request", "stm32-channel", "stm32-mux"]
	enum class
	Channel
	{
	%% for channel in range(channel_count["min"], channel_count["max"] + 1)
		Channel{{ channel }}{% if loop.first %} = 0{% endif %},
	%% endfor
	};

	%% if dmaType in ["stm32-channel-request"]
	%% set request_count = namespace(max_requests = 0)
	%% for channels in dma["channels"]
		%% for channel in channels.channel
			%% for request in channel.request
				%% if request_count.max_requests < request.position | int
					%% set request_count.max_requests = request.position | int
				%% endif
			%% endfor
		%% endfor
	%% endfor
	enum class
	Request
	{
	%% for request in range(0, request_count.max_requests + 1)
		Request{{ request }}{% if request == 0 %} = 0{% endif %},
	%% endfor
	};
	%% elif dmaType in ["stm32-mux"]:
	enum class
	Request
	{
		None = 0,
	%% for request in range(1, 127 + 1)
		Request{{ request }},
	%% endfor
	};
	%% else
	enum class
	Request
	{
		// Nothing to see here. This controller has no request mux, instead
		// all requests are OR-ed together.
		Any
	};
	%% endif
%% endif

	enum class
	Priority : uint32_t
	{
		Low 		= 0,
		Medium  	= {{ reg_prefix }}_PL_0,
		High 		= {{ reg_prefix }}_PL_1,
		VeryHigh 	= {{ reg_prefix }}_PL_1 | {{ reg_prefix }}_PL_0,
	};

	/// In direct mode (if the FIFO is not used)
	/// MSIZE is forced by hardware to the same value as PSIZE
	enum class
	MemoryDataSize : uint32_t
	{
		Byte 		= 0,
		Bit8 		= Byte,
		HalfWord 	= {{ reg_prefix }}_MSIZE_0,
		Bit16 		= HalfWord,
		Word 		= {{ reg_prefix }}_MSIZE_1,
		Bit32 		= Word,
	};

	enum class
	PeripheralDataSize : uint32_t
	{
		Byte 		= 0,
		Bit8 		= Byte,
		HalfWord 	= {{ reg_prefix }}_PSIZE_0,
		Bit16 		= HalfWord,
		Word 		= {{ reg_prefix }}_PSIZE_1,
		Bit32 		= Word,
	};

	enum class
	MemoryIncrementMode : uint32_t
	{
		Fixed 		= 0,
		Increment 	= {{ reg_prefix }}_MINC, ///< incremented according to MemoryDataSize
	};

	enum class
	PeripheralIncrementMode : uint32_t
	{
		Fixed 		= 0,
		Increment 	= {{ reg_prefix }}_PINC, ///< incremented according to PeripheralDataSize
	};

	enum class
	CircularMode : uint32_t
	{
		Disabled 	= 0,
		Enabled 	= {{ reg_prefix }}_CIRC, ///< circular mode
	};

	enum class
	DataTransferDirection : uint32_t
	{
%% if target["family"] == "f4"
		/// Source: DMA_SxPAR; Sink: DMA_SxM0AR
		PeripheralToMemory 	= 0,
		/// Source: DMA_SxM0AR; Sink: DMA_SxPAR
		MemoryToPeripheral 	= DMA_SxCR_DIR_0,
		/// Source: DMA_SxPAR; Sink: DMA_SxM0AR
		MemoryToMemory 		= DMA_SxCR_DIR_1,
%% elif dmaType in ["stm32-channel-request", "stm32-channel", "stm32-mux"]
		/// Source: DMA_CPARx; Sink: DMA_CMARx
		PeripheralToMemory 	= 0,
		/// Source: DMA_CMARx; Sink: DMA_CPARx
		MemoryToPeripheral 	= DMA_CCR_DIR,
		/// Source: DMA_CPARx; Sink: DMA_CMARx
		MemoryToMemory 		= DMA_CCR_MEM2MEM,
%% endif
	};

	/**
	 * Peripheral signals that can be used in DMA channels
	 */
	enum class
	Signal : uint8_t {
		NoSignal,
%% for signal in dmaSignals
		{{ signal }},
%% endfor
	};

	enum class Interrupt {
		Global = 0x01,
		TransferComplete = 0x02,
		HalfTransferComplete = 0x04,
		Error = 0x08,
		All = 0x0f,
	};
	MODM_FLAGS32(Interrupt);

	using IrqHandler = void (*)(void);

protected:
%% if target["family"] == "f4"
	static constexpr uint32_t memoryMask =
			DMA_SxCR_MBURST_1 | DMA_SxCR_MBURST_0 |	// MemoryBurstTransfer
			DMA_SxCR_MSIZE_0  | DMA_SxCR_MSIZE_1  |	// MemoryDataSize
			DMA_SxCR_MINC                         |	// MemoryIncrementMode
			DMA_SxCR_DIR_0    | DMA_SxCR_DIR_1;    	// DataTransferDirection
	static constexpr uint32_t peripheralMask =
			DMA_SxCR_PBURST_1 | DMA_SxCR_PBURST_0 |	// PeripheralBurstTransfer
			DMA_SxCR_PSIZE_0  | DMA_SxCR_PSIZE_1  |	// PeripheralDataSize
			DMA_SxCR_PINC                         |	// PeripheralIncrementMode
			DMA_SxCR_DIR_0    | DMA_SxCR_DIR_1;    	// DataTransferDirection
	static constexpr uint32_t configmask =
			DMA_SxCR_CHSEL_2 | DMA_SxCR_CHSEL_1 | DMA_SxCR_CHSEL_0 |	// Channel
			DMA_SxCR_PL_1    | DMA_SxCR_PL_0    |						// Priority
			DMA_SxCR_CIRC    |											// CircularMode
			DMA_SxCR_PFCTRL;											// FlowControl
%% elif dmaType in ["stm32-channel-request", "stm32-channel", "stm32-mux"]
	static constexpr uint32_t memoryMask =
			DMA_CCR_MSIZE_0  | DMA_CCR_MSIZE_1  |	// MemoryDataSize
			DMA_CCR_MINC                        |	// MemoryIncrementMode
			DMA_CCR_DIR      | DMA_CCR_MEM2MEM; 	// DataTransferDirection
	static constexpr uint32_t peripheralMask =
			DMA_CCR_PSIZE_0  | DMA_CCR_PSIZE_1  |	// PeripheralDataSize
			DMA_CCR_PINC                        |	// PeripheralIncrementMode
			DMA_CCR_DIR      | DMA_CCR_MEM2MEM;  	// DataTransferDirection
	static constexpr uint32_t configmask =
			DMA_CCR_CIRC     |						// CircularMode
			DMA_CCR_PL_1     | DMA_CCR_PL_0;		// Priority
%% endif

	template <uint32_t ID>
	struct Nvic;
};

%% for controller in dmaController
%% set instance=controller["instance"]
template <>
struct DmaBase::Nvic<{{ instance }}>
{
	static constexpr IRQn_Type DmaIrqs[] {
	%% for channel in range(controller["min_channel"], controller["max_channel"] + 1)
		{{ irqMap[instance][channel] }}_IRQn,
	%% endfor
	};
};

%% endfor

}	// namespace platform

}	// namespace modm

#endif	// MODM_STM32_DMA_BASE_HPP
