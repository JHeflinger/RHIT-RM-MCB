/*
 * Copyright (c) 2013-2014, 2017, Niklas Hauser
 * Copyright (c) 2017, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include <avr/io.h>
#include <avr/interrupt.h>

#include <modm/architecture/platform/avr/xmega.hpp>
#include <modm/architecture/interface/gpio.hpp>

#include "uart_{{ id.lower() }}.hpp"

#ifdef USART{{ id }}_RXC_vect

namespace
{
//	GPIO_INPUT(RXD, {{ id[0] }}, {{ number * 4 + 2 }});
//	GPIO_OUTPUT(TXD, {{ id[0] }}, {{ number * 4 + 3 }});
}

// ----------------------------------------------------------------------------
void
modm::platform::Uart{{ id }}::initializeWithFractionalBaudrate(uint16_t bsel, uint8_t bscale)
{
//	TXD::set();
//	TXD::setOutput();
//
//	RXD::setInput();
	USART{{ id }}.BAUDCTRLA = static_cast<uint8_t>(bsel & 0xff);
	USART{{ id }}.BAUDCTRLB = static_cast<uint8_t>((bscale << USART_BSCALE0_bp) | (bsel >> 8));

	// setting the frame size to 8 bit
	USART{{ id }}_CTRLC = USART_CHSIZE_8BIT_gc;

	// enable both, receiver and transmitter
	USART{{ id }}_CTRLB |= USART_RXEN_bm | USART_TXEN_bm;
}

// ----------------------------------------------------------------------------
void
modm::platform::Uart{{ id }}::write(uint8_t c)
{
	while (not (USART{{ id }}_STATUS & USART_DREIF_bm))
		;

	USART{{ id }}_DATA = c;
}

// ----------------------------------------------------------------------------
void
modm::platform::Uart{{ id }}::write(const uint8_t *s, uint8_t n)
{
	while (--n != 0) {
		Uart{{ id }}::write(*s++);
	}
}

// ----------------------------------------------------------------------------
bool
modm::platform::Uart{{ id }}::read(uint8_t& c)
{
	if (USART{{ id }}_STATUS & USART_RXCIF_bm) {
		// the status flag is cleared by reading DATA
		c = USART{{ id }}_DATA;
		return true;
	}
	return false;
}

// ----------------------------------------------------------------------------
uint8_t
modm::platform::Uart{{ id }}::read(uint8_t *b, uint8_t n)
{
	/*
	 * The delay of 1.5 times frame time could be calculated at compile time
	 * if the baud rate was known. It's only known in the constructor, not here.
	 *
	 * This manual calculation assumes a baud rate of 115'200.
	 * On cycle of the loop if(USART{{ id }}_STATUS ...) takes nine instructions:
	 *
	 * if (USART...)		LDS		2
	 * 						SBRS	2
	 * 						RJMP	2
	 * if (--delay == 0)	SUBI	1
	 * 						BRNE	2
	 *
	 * Assuming a baud rate of 115'200 a frame (1 stop, 8 data, 1 stop bit)
	 * lasts 86.6usec. At a CPU frequency of F_CPU a CPU cycle lasts
	 * 1/F_CPU seconds. So a frame takes (86.6usec * F_CPU) cycles, or
	 * 86.6 * (F_CPU/1'000'000) = (F_CPU / 11'547) cycles. Adding a margin of
	 * 50% (F_CPU / 7'698) cycles are equal to 1.5 times the frame time.
	 * The loop needs nine instructions so the loop should loop
	 * (F_CPU / 69'282) times.
	 *
	 * Example for 32 MHz:
	 * A CPU cycle takes 31.25nsec. In 86.6usec 2'771.2 CPU cycles are executed.
	 * The loop takes nine instructions so it is enough to loop 308 times for
	 * one frame time.  After adding 50% the loop should loop 462 times.
	 *
	 * This is the same result as (32'000'000 / 69'282) = 462.
	 */
	uint8_t rcvd = 0;
	uint16_t const delayStart = (F_CPU / 69282);		// TODO Make depend on baudrate
	uint16_t delay = delayStart;
	while (true)
	{
		if (USART{{ id }}_STATUS & USART_RXCIF_bm)
		{
			// data available
			*b++ = USART{{ id }}_DATA;
			if (++rcvd == n) {
				return rcvd;
			}
			delay = delayStart;
		}
		else {
			// no new data, but wait a little longer
			if (--delay == 0) {
				return rcvd;
			}
		}
	}
}

#endif // USART{{ id }}
