/*
 * Copyright (c) 2020-2021, Niklas Hauser
 * Copyright (c) 2020, Erik Henriksson
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "../device.hpp"
#include "gclk.hpp"
#include <modm/math/units.hpp>

// CMSIS Core compliance
constinit uint32_t modm_fastdata SystemCoreClock(modm::platform::GenericClockController::BootFrequency);
modm_weak void SystemCoreClockUpdate() { /* Nothing to update */ }

namespace modm::platform
{
constinit uint16_t modm_fastdata delay_fcpu_MHz(computeDelayMhz(GenericClockController::BootFrequency));
constinit uint16_t modm_fastdata delay_ns_per_loop(computeDelayNsPerLoop(GenericClockController::BootFrequency));

bool
GenericClockController::initOsc8MHz(uint32_t waitCycles)
{
	SYSCTRL->OSC8M.bit.PRESC = 0x0;
	SYSCTRL->OSC8M.bit.ONDEMAND = true;
	SYSCTRL->OSC8M.bit.RUNSTDBY = false;
	SYSCTRL->OSC8M.bit.ENABLE = true;
	while (!SYSCTRL->PCLKSR.bit.OSC8MRDY && --waitCycles);
	return waitCycles;
}

bool
GenericClockController::initExternalCrystal(uint32_t waitCycles)
{
	// Enable external crystal.
	SYSCTRL->XOSC32K.reg =
		SYSCTRL_XOSC32K_STARTUP( 0x6u ) |
		SYSCTRL_XOSC32K_XTALEN |
		SYSCTRL_XOSC32K_RUNSTDBY |
		SYSCTRL_XOSC32K_EN32K;
	// separate call, as described in chapter 15.6.3
	SYSCTRL->XOSC32K.bit.ENABLE = 1;
	while (!SYSCTRL->PCLKSR.bit.XOSC32KRDY and --waitCycles) ;

	// Write Generic Clock Generator configuration
	GCLK->GENCTRL.reg =
		GCLK_GENCTRL_ID(uint32_t(ClockGenerator::ExternalCrystal32K)) |
		GCLK_GENCTRL_SRC_XOSC32K |
		GCLK_GENCTRL_IDC |
		GCLK_GENCTRL_GENEN;
	// Wait for synchronization.
	while (GCLK->STATUS.bit.SYNCBUSY and --waitCycles) ;

	return waitCycles;
}

bool
GenericClockController::initDFLL48MHz(uint32_t waitCycles)
{
	// Put ExternalCrystal as source for the PLL
	GCLK->CLKCTRL.reg =
		GCLK_CLKCTRL_ID(uint32_t(ClockMux::DFLL48M)) |
		GCLK_CLKCTRL_GEN(uint32_t(ClockGenerator::ExternalCrystal32K)) |
		GCLK_CLKCTRL_CLKEN;
	// Wait for synchronization.
	while (GCLK->STATUS.bit.SYNCBUSY and --waitCycles) ;

	// Errata 1.2.1: Disable the OnDemand mode
	SYSCTRL->DFLLCTRL.bit.ONDEMAND = 0;
	// Wait for synchronization.
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY and --waitCycles) ;

	SYSCTRL->DFLLMUL.reg =
		SYSCTRL_DFLLMUL_CSTEP( 31 ) |
		SYSCTRL_DFLLMUL_FSTEP( 511 ) |
		SYSCTRL_DFLLMUL_MUL(48_MHz / 32'768_Hz);
	// Wait for synchronization.
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY and --waitCycles) ;

	// Write full configuration to DFLL control register
	SYSCTRL->DFLLCTRL.reg |=
		SYSCTRL_DFLLCTRL_MODE | // Enable the closed loop mode
		SYSCTRL_DFLLCTRL_WAITLOCK | // No output until DFLL is locked.
		SYSCTRL_DFLLCTRL_QLDIS ; // Disable Quick lock
	// Wait for synchronization.
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY and --waitCycles) ;

	// Enable the DFLL
	SYSCTRL->DFLLCTRL.bit.ENABLE = true;
	// Wait for locks flags
	while (
		not (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) or
		not (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF));
	// Wait for synchronization.
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY and --waitCycles) ;

	return waitCycles;
}

bool
GenericClockController::setSystemClock(ClockSource source, uint32_t waitCycles)
{
	GCLK->GENDIV.reg =
		GCLK_GENDIV_ID(uint32_t(ClockGenerator::System)) |
		GCLK_GENDIV_DIV(0u);
	GCLK->GENCTRL.reg =
		GCLK_GENCTRL_ID(uint32_t(ClockGenerator::System)) |
		GCLK_GENCTRL_SRC(uint32_t(source)) |
		GCLK_GENCTRL_IDC |
		GCLK_GENCTRL_GENEN;
	// Wait for synchronization.
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) ;

	return waitCycles;
}

}
