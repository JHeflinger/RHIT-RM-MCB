/*
 * Copyright (c) 2013-2014, Kevin LÃ¤ufer
 * Copyright (c) 2014-2017, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "../device.hpp"
#include "clock.hpp"


// TODO: Move to common file
#define PDRUNCFG_SYSOSC_PD		(1<<5)
#define PDRUNCFG_SYSPLL_PD		(1<<7)
#define SYSOSCCTRL_BYPASS		(1<<0)
#define SYSOSCCTRL_FREQRANGE	(1<<1)
#define SYSPLLSTAT_LOCK			(1<<0)
#define SYSAHBCLKCTRL_SYS			(1<<0)
#define SYSAHBCLKCTRL_ROM			(1<<1)
#define SYSAHBCLKCTRL_RAM			(1<<2)
#define SYSAHBCLKCTRL_FLASHREG		(1<<3)
#define SYSAHBCLKCTRL_FLASHARRAY	(1<<4)
#define SYSAHBCLKCTRL_I2C			(1<<5)
#define SYSAHBCLKCTRL_GPIO			(1<<6)
#define SYSAHBCLKCTRL_CT16B0		(1<<7)
#define SYSAHBCLKCTRL_CT16B1		(1<<8)
#define SYSAHBCLKCTRL_CT32B0		(1<<9)
#define SYSAHBCLKCTRL_CT32B1		(1<<10)
#define SYSAHBCLKCTRL_SSP0			(1<<11)
#define SYSAHBCLKCTRL_UART			(1<<12)
#define SYSAHBCLKCTRL_ADC			(1<<13)
#define SYSAHBCLKCTRL_WDT			(1<<15)
#define SYSAHBCLKCTRL_IOCON			(1<<16)	// clock for io configuration block
#define SYSAHBCLKCTRL_CAN			(1<<17)
#define SYSAHBCLKCTRL_SSP1			(1<<18)

// ----------------------------------------------------------------------------
bool
modm::platform::Rcc::enableInternalClock(uint32_t, uint32_t)
{
	return true;
}

bool
modm::platform::Rcc::enableExternalClock(uint32_t, uint32_t)
{
	LPC_SYSCON->PDRUNCFG &= ~PDRUNCFG_SYSOSC_PD;	// powerup
	LPC_SYSCON->SYSOSCCTRL |= SYSOSCCTRL_BYPASS;	// enable bypass
	return true;
}

bool
modm::platform::Rcc::enableExternalCrystal(uint32_t f_kHz, uint32_t)
{
	LPC_SYSCON->PDRUNCFG &= ~PDRUNCFG_SYSOSC_PD;	// powerup
	LPC_SYSCON->SYSOSCCTRL &= ~SYSOSCCTRL_BYPASS;	// do not bypass
	if(f_kHz >= u32kHz(1_MHz) && f_kHz <= u32kHz(17_MHz)) {
		LPC_SYSCON->SYSOSCCTRL &= ~SYSOSCCTRL_FREQRANGE; // 1-20MHz
	}
	else if (f_kHz >= u32kHz(17_MHz) && f_kHz <= u32kHz(25_MHz)) {
		LPC_SYSCON->SYSOSCCTRL |= SYSOSCCTRL_FREQRANGE; // 15-25MHz
	}
	else return false;	// should not get here
	return true;
}

// ----------------------------------------------------------------------------
bool
modm::platform::Rcc::enablePll(PllSource source, uint8_t pllM, uint8_t pllP)
{
	// SYSPLLCLKSEL
	LPC_SYSCON->SYSPLLCLKSEL = (LPC_SYSCON->SYSPLLCLKSEL & 0b11)
								| static_cast<uint32_t>(source);
	LPC_SYSCON->SYSPLLCLKUEN = 0x01;	// toggle update enable register
	LPC_SYSCON->SYSPLLCLKUEN = 0x00;
	LPC_SYSCON->SYSPLLCLKUEN = 0x01;
	while (!(LPC_SYSCON->SYSPLLCLKUEN & 0x01));		// wait until updated
	LPC_SYSCON->SYSPLLCTRL = (0x1f & (pllM-1)) | (0x60 & pllP);
	LPC_SYSCON->PDRUNCFG &= ~PDRUNCFG_SYSPLL_PD;	// power up pll
	while (!(LPC_SYSCON->SYSPLLSTAT & SYSPLLSTAT_LOCK));// wait for pll to be locked
	return true;
}

// ----------------------------------------------------------------------------
bool
modm::platform::Rcc::enableSystemClock(SystemClockSource src, uint32_t /*waitCycles*/)
{
	LPC_SYSCON->MAINCLKSEL = static_cast<uint32_t>(src);
	LPC_SYSCON->MAINCLKUEN = 0x01;	// toggle update enable register
	LPC_SYSCON->MAINCLKUEN = 0x00;
	LPC_SYSCON->MAINCLKUEN = 0x01;
	while (!(LPC_SYSCON->MAINCLKUEN & 0x01));	// wait until updated

	// Set AHB Frequency
	LPC_SYSCON->SYSAHBCLKDIV  = 0x1;	// device ahb frequency by 1 (max 255)
	// TODO: do not enable gpio clock here but in startup.c.in form gpio driver
	LPC_SYSCON->SYSAHBCLKCTRL =   SYSAHBCLKCTRL_SYS | SYSAHBCLKCTRL_ROM
								| SYSAHBCLKCTRL_RAM | SYSAHBCLKCTRL_FLASHREG
								| SYSAHBCLKCTRL_FLASHARRAY | SYSAHBCLKCTRL_GPIO
								| SYSAHBCLKCTRL_IOCON;
	// TODO: set SSP0, UART and SSP1 prescalers in the specific driver file

	return true;
}
