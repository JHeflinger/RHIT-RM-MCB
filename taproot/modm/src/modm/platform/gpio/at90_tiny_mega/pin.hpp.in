/*
 * Copyright (c) 2017-2018, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

%% set port = gpio["port"] | upper
%% set pin  = gpio["pin"]

#ifndef MODM_AVR_GPIO_PIN_{{ port ~ pin }}_HPP
#define MODM_AVR_GPIO_PIN_{{ port ~ pin }}_HPP

#include "base.hpp"
#include "set.hpp"

namespace modm
{

namespace platform
{

/// @cond
class Gpio{{ port ~ pin }};
using GpioOutput{{ port ~ pin }} = Gpio{{ port ~ pin }};
using GpioInput{{ port ~ pin }}  = Gpio{{ port ~ pin }};
/// @endcond

/// IO class for Pin {{port ~ pin}}
/// @ingroup	modm_platform_gpio
class Gpio{{ port ~ pin }} : public Gpio, public ::modm::GpioIO
{
	template< class... Gpios >
	friend class GpioSet;
	using PinSet = GpioSet<Gpio{{ port ~ pin }}>;

public:
	using Output = GpioOutput{{ port ~ pin }};
	using Input = GpioInput{{ port ~ pin }};
	using IO = Gpio{{ port ~ pin }};
	using Type = Gpio{{ port ~ pin }};
	static constexpr bool isInverted = false;
	static constexpr Port port = Port::{{port}};
	static constexpr uint8_t pin = {{pin}};

protected:
	static constexpr uint8_t mask = (1 << pin);

public:
	// GpioOutput
	inline static void setOutput(bool status) { PinSet::setOutput(status); }
	inline static void setOutput(OutputType type) { PinSet::setOutput(type); }
	inline static void setOutput() { PinSet::setOutput(); }
	inline static void configure(OutputType type) { PinSet::configure(type); }
	inline static void set() { PinSet::set(); }
	inline static void set(bool status) { PinSet::set(status); }
	inline static void reset() { PinSet::reset(); }
	inline static void toggle() { PinSet::toggle(); }
	inline static bool isSet() {
		return (PORT{{port}} & mask);
	}
	// GpioInput
	inline static void configure(InputType type) { PinSet::configure(type); }
	inline static void setInput(InputType type) { PinSet::setInput(type); }
	inline static void setInput() { PinSet::setInput(); }
	inline static bool read() {
		return (PIN{{port}} & mask);
	}
		%% if extint >= 0
	inline static void setInputTrigger(InputTrigger trigger) {
			%% if extint < 4
				%% if isc2 is defined and extint == 2
		{{isc2}} = ({{isc2}} & ~(1 << ISC2)) | ((i(trigger) & 0b01) << ISC2);
				%% else
		{{eicra}} = ({{eicra}} & ~(0b11 << 2*{{extint}})) | (i(trigger) << 2*{{extint}});
				%% endif
			%% else
		EICRB = (EICRB & ~(0b11 << 2*{{extint - 4}})) | (i(trigger) << 2*{{extint - 4}});
			%% endif
	}
	inline static void enableExternalInterrupt() {
		EIMSK |= (1 << INT{{extint}});
	}
	inline static void disableExternalInterrupt() {
		EIMSK &= ~(1 << INT{{extint}});
	}
	inline static bool getExternalInterruptFlag() {
		return (EIFR & (1 << INTF{{extint}}));
	}
	inline static void acknowledgeExternalInterruptFlag() {
		EIFR |= (1 << INTF{{extint}});
	}
		%% endif
		%% if pcint >= 0
			%% set af_id = pcint
			%% set af_reg = (af_id // 8)
			%% if target["family"] == "attiny"
				%% if (target["name"] in ["2313", "4313"]) and af_id >= 11 and af_id <= 17
					%% set af_reg = 2
				%% elif (target["name"] in ["20", "40", "1634"]) and af_id >= 12 and af_id <= 17
					%% set af_reg = 2
				%% elif (target["name"] in ["13", "25", "45", "85", "2313", "4313"])
					%% set af_reg = ""
				%% endif
			%% endif
	inline static void enablePcInterrupt() {
		PCMSK{{af_reg}} |= (1 << PCINT{{af_id}});
		PCICR |= (1 << PCIE{{af_reg}});
	}
	inline static void disablePcInterrupt() {
		uint8_t pcmsk = PCMSK{{af_reg}} & ~(1 << PCINT{{af_id}});
		PCMSK{{af_reg}} = pcmsk;
		if (!pcmsk) {
			PCICR &= ~(1 << PCIE{{af_reg}});
		}
	}
	inline static bool readPcInterruptFlag() {
		return (PCIFR & (1 << PCIF{{af_reg}}));
	}
	inline static void acknowledgePcInterruptFlag() {
		PCIFR |= (1 << PCIF{{af_reg}});
	}
		%% endif
	// GpioIO
	inline static Direction getDirection() {
		return (DDR{{port}} & mask) ? Direction::Out : Direction::In;
	}
	inline static void
	disconnect() {
		DDR{{port}} &= ~mask;
		%% if pue
		PUE{{port}} &= ~mask;
		%% else
		PORT{{port}} &= ~mask;
		%% endif
	}

public:
#ifdef __DOXYGEN__
	/// @{
	/// Connect to any software peripheral
	struct BitBang;
	%% for name, group in signals.items()
	/// Connect to {% for sig in group %}{{ sig.driver }}{{ "" if loop.last else " or "}}{% endfor %}
	using {{ name }} = GpioSignal;
	%% endfor
	/// @}
#endif
	/// @cond
	template< Peripheral peripheral >
	struct BitBang { static void connect();
		static_assert(
			(peripheral == Peripheral::BitBang),
			"Gpio{{ port ~ pin }}::BitBang only connects to bit-bang drivers!");
	};
	%% for signal_name, signal_group in signals.items()
	template< Peripheral peripheral >
	struct {{ signal_name }} { static void connect();
		static_assert(
		%% for signal in signal_group
			(peripheral == Peripheral::{{ signal.driver }}){% if loop.last %},{% else %} ||{% endif %}
		%% endfor
			"Gpio{{ port ~ pin }}::{{ signal_name }} only connects to {% for signal in signal_group %}{{signal.driver}}{% if not loop.last %} or {% endif %}{% endfor %}!");
	};
	%% endfor
	/// @endcond
};

/// @cond
template<>
struct Gpio{{ port ~ pin }}::BitBang<Peripheral::BitBang>
{
	using Gpio = Gpio{{ port ~ pin }};
	static constexpr Gpio::Signal Signal = Gpio::Signal::BitBang;
	inline static void connect() {}
};
%% for signal_group in signals.values()
	%% for signal in signal_group
template<>
struct Gpio{{ port ~ pin }}::{{ signal.name }}<Peripheral::{{ signal.driver }}>
{
	using Gpio = Gpio{{ port ~ pin }};
	static constexpr Gpio::Signal Signal = Gpio::Signal::{{ signal.name }};
	inline static void connect() { /* tumbleweed */ }
};
	%% endfor
%% endfor
/// @endcond

}	// namespace platform

}	// namespace modm

#endif	// MODM_AVR_GPIO_PIN_{{ port ~ pin }}_HPP
