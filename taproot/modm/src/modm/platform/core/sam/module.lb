#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2019, Ethan Slattery
# Copyright (c) 2021, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import math

def init(module):
    module.name = ":platform:core"
    module.description = FileReader("module.md")

def prepare(module, options):
    if options[":target"].identifier.platform != "sam":
        return False

    module.depends(":platform:cortex-m")
    return True


def build(env):
    target = env[":target"].identifier
    env.substitutions = {"target": target}
    env.outbasepath = "modm/src/modm/platform/core"
    # startup helper code
    env.template("startup_platform.c.in")

    # delay code that must be tuned for each family
    # (cycles per loop, setup cost in loops, us shift)
    tuning = {
        "d": (3,  4, 5), # CM0 tested on D21 in RAM
    }.get(target.family, (4, 4, 5))

    env.substitutions.update({
        "with_cm0": env[":target"].has_driver("core:cortex-m0*"),
        "with_cm7": False,
        "loop": tuning[0],
        "shift": int(math.log2(tuning[1])),
        "us_shift": tuning[2],
        "with_assert": env.has_module(":architecture:assert")
    })
    env.template("../cortex/delay_ns.cpp.in", "delay_ns.cpp")
    env.template("../cortex/delay_ns.hpp.in", "delay_ns.hpp")
    env.template("../cortex/delay_impl.hpp.in", "delay_impl.hpp")


def post_build(env):
    env.substitutions = env.query("::cortex-m:linkerscript")
    env.outbasepath = "modm/link"
    env.template("../cortex/ram.ld.in", "linkerscript.ld")
