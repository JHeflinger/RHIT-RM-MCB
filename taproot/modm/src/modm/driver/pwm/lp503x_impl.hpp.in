/*
 * Copyright (c) 2020, Christopher Durand
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_LP503x_HPP
#	error "Don't include this file directly, use 'lp503x.hpp' instead!"
#endif

#include <algorithm>

namespace modm
{

template<typename I2cMaster, size_t Channels>
Lp503x<I2cMaster, Channels>::Lp503x(uint8_t i2cAddress)
	: I2cDevice<I2cMaster, 3>(i2cAddress)
{
}

template<typename I2cMaster, size_t Channels>
ResumableResult<bool>
Lp503x<I2cMaster, Channels>::initialize()
{
	RF_BEGIN();
	success = RF_CALL(writeRegister(Register::Reset, Reset::ResetDevice));
	if(!success) {
		RF_RETURN(false);
	}

	RF_END_RETURN_CALL(setConfiguration(DefaultConfiguration));
}

template<typename I2cMaster, size_t Channels>
ResumableResult<bool>
Lp503x<I2cMaster, Channels>::enable()
{
	return writeRegister(Register::DeviceConfig0, DeviceConfig0::ChipEnable);
}

template<typename I2cMaster, size_t Channels>
ResumableResult<bool>
Lp503x<I2cMaster, Channels>::disable()
{
	return writeRegister(Register::DeviceConfig0, DeviceConfig0_t{});
}

template<typename I2cMaster, size_t Channels>
ResumableResult<bool>
Lp503x<I2cMaster, Channels>::setConfiguration(DeviceConfig1_t configuration)
{
	return writeRegister(Register::DeviceConfig1, configuration | DeviceConfig1::AutoIncrement);
}

template<typename I2cMaster, size_t Channels>
ResumableResult<bool>
Lp503x<I2cMaster, Channels>::setChannelBrightness(uint8_t channel, uint8_t value)
{
	const Register reg = static_cast<Register>(uint8_t(Register::Out0Color) + channel);

	RF_BEGIN();
	if(channel >= Channels) {
		RF_RETURN(false);
	}

	RF_END_RETURN_CALL(writeRegister(reg, value));
}

%% if options.multichannel_write
template<typename I2cMaster, size_t Channels>
ResumableResult<bool>
Lp503x<I2cMaster, Channels>::setChannelBrightnessValues(uint8_t startChannel,
														const uint8_t* values,
														uint8_t numChannels)
{
	RF_BEGIN();
	if(numChannels == 0 || (startChannel + numChannels) > Channels) {
		RF_RETURN(false);
	}

	RF_END_RETURN_CALL(writeRegisters(
		static_cast<Register>(uint8_t(Register::Out0Color) + startChannel),
		values, numChannels));
}
%% endif

template<typename I2cMaster, size_t Channels>
ResumableResult<bool>
Lp503x<I2cMaster, Channels>::setLedGroupBrightness(uint8_t index, uint8_t value)
{
	const Register reg = static_cast<Register>(uint8_t(Register::Led0Brightness) + index);

	RF_BEGIN();
	if(index >= (Channels / 3)) {
		RF_RETURN(false);
	}

	RF_END_RETURN_CALL(writeRegister(reg, value));
}

template<typename I2cMaster, size_t Channels>
ResumableResult<bool>
Lp503x<I2cMaster, Channels>::setBankModeEnabled(LedBankMode_t bankMode)
{
	RF_BEGIN();
	buffer[0] = static_cast<uint8_t>(Register::LedConfig0);
	buffer[1] = bankMode.value & 0xff;
	buffer[2] = (bankMode.value & 0xf00) >> 8;
	this->transaction.configureWrite(buffer, 3);
	RF_END_RETURN_CALL(this->runTransaction());
}

template<typename I2cMaster, size_t Channels>
ResumableResult<bool>
Lp503x<I2cMaster, Channels>::setBankABrightness(uint8_t value)
{
	return writeRegister(Register::BankAColor, value);
}

template<typename I2cMaster, size_t Channels>
ResumableResult<bool>
Lp503x<I2cMaster, Channels>::setBankBBrightness(uint8_t value)
{
	return writeRegister(Register::BankBColor, value);
}

template<typename I2cMaster, size_t Channels>
ResumableResult<bool>
Lp503x<I2cMaster, Channels>::setBankCBrightness(uint8_t value)
{
	return writeRegister(Register::BankCColor, value);
}

template<typename I2cMaster, size_t Channels>
ResumableResult<bool>
Lp503x<I2cMaster, Channels>::setBankBrightness(uint8_t value)
{
	return writeRegister(Register::BankBrightness, value);
}

template<typename I2cMaster, size_t Channels>
ResumableResult<bool>
Lp503x<I2cMaster, Channels>::writeRegister(Register reg, RegisterValue_t value)
{
	return writeRegister(reg, value.value);
}

template<typename I2cMaster, size_t Channels>
ResumableResult<bool>
Lp503x<I2cMaster, Channels>::writeRegister(Register reg, uint8_t value)
{
	RF_BEGIN();
	buffer[0] = static_cast<uint8_t>(reg);
	buffer[1] = value;
	this->transaction.configureWrite(buffer, 2);
	RF_END_RETURN_CALL(this->runTransaction());
}

%% if options.multichannel_write
template<typename I2cMaster, size_t Channels>
ResumableResult<bool>
Lp503x<I2cMaster, Channels>::writeRegisters(Register startRegister,
										   const uint8_t* values, uint8_t numValues)
{
	RF_BEGIN();

	if((numValues + 1u) > sizeof(buffer)) {
		RF_RETURN(false);
	}

	buffer[0] = static_cast<uint8_t>(startRegister);
	std::copy_n(values, numValues, &buffer[0] + 1);
	this->transaction.configureWrite(buffer, numValues + 1u);
	RF_END_RETURN_CALL(this->runTransaction());
}
%% endif

}
