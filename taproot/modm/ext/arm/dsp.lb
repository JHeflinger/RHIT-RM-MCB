#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016, Fabian Greif
# Copyright (c) 2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

from collections import defaultdict
from pathlib import Path

class CmsisDspModule(Module):

    def __init__(self, path):
        self.path = str(path.name)
        self.name = self.path.replace("Functions", "").replace("Common", "") \
                             .replace("Math", "_math").lower()

    def init(self, module):
        module.name = ":cmsis:dsp:{}".format(self.name)
        module.description = "DSP {}".format(" ".join(s.capitalize()
                                             for s in self.name.split("_")))

    def prepare(self, module, options):
        dependencies = {
            "basic_math": [],
            "bayes": [":cmsis:dsp:statistics"],
            "complex_math": [":cmsis:dsp:fast_math"],
            "controller": [":cmsis:dsp:tables"],
            "distance": [":cmsis:dsp:basic_math", ":cmsis:dsp:statistics"],
            "fast_math": [":cmsis:dsp:tables"],
            "filtering": [":cmsis:dsp:tables", ":cmsis:dsp:support"],
            "matrix": [],
            "statistics": [":cmsis:dsp:fast_math"],
            "support": [],
            "svm": [],
            "tables": [],
            "transform": [":cmsis:dsp:tables"],
        }
        module.depends(*dependencies[self.name])
        return True

    def build(self, env):
        metadata = defaultdict(list)
        metadata[":build:cflags"].append("-fno-strict-aliasing")
        metadata[":build:ccflags"].append("-Wno-sign-compare")
        metadata[":build:ccflags"].append("-Wno-double-promotion")

        core = env[":target"].get_driver("core")["type"]
        if "f" in core:
            metadata[":build:cppdefines"].append("__FPU_PRESENT=1")

        if env[":cmsis:dsp:check_matrix_sizes"]:
            metadata[":build:cppdefines"].append("ARM_MATH_MATRIX_CHECK")
        else:
            metadata[":build:cppdefines.debug"].append("ARM_MATH_MATRIX_CHECK")

        if env[":cmsis:dsp:round_float_inputs"]:
            metadata[":build:cppdefines"].append("ARM_MATH_ROUNDING")

        if not env.get(":cmsis:dsp:unaligned_data", False):
            metadata[":build:cppdefines"].append("UNALIGNED_SUPPORT_DISABLE")

        if env.get(":cmsis:dsp:loop_unroll", False):
            metadata[":build:cppdefines"].append("ARM_MATH_LOOPUNROLL")

        env.outbasepath = "modm/ext/cmsis/dsp"

        if "tables" in self.name:
            env.copy("cmsis/CMSIS/DSP/Include/arm_common_tables.h", "arm_common_tables.h")
            env.copy("cmsis/CMSIS/DSP/Include/arm_const_structs.h", "arm_const_structs.h")
        if "support" in self.name:
            env.copy("cmsis/CMSIS/DSP/PrivateInclude/arm_sorting.h", "arm_sorting.h")

        operations = env.copy("cmsis/CMSIS/DSP/Source/{}".format(self.path), "{}".format(self.path),
                              ignore=env.ignore_files("arm_bitreversal2.c"))

        # For all sources add these compile flags
        for key, values in metadata.items():
            env.collect(key, *values, operations=operations)


# =============================================================================
def init(module):
    module.name = ":cmsis:dsp"
    module.description = FileReader("dsp.md")

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("core:cortex-m*"):
        return False

    if not device.has_driver("core:cortex-m0*"):
        module.add_option(
            BooleanOption(
                name="unaligned_data",
                description=descr_unaligned_data,
                default=False))
    module.add_option(
        BooleanOption(
            name="check_matrix_sizes",
            description=descr_matrix_sizes,
            default=False))
    module.add_option(
        BooleanOption(
            name="round_float_inputs",
            description=descr_round_floats,
            default=True))
    module.add_option(
        BooleanOption(
            name="loop_unroll",
            description=descr_loop_unroll,
            default=True))

    for path in Path(localpath("cmsis/CMSIS/DSP/Source")).iterdir():
        if path.is_dir():
            module.add_submodule(CmsisDspModule(path))

    return True

def build(env):
    core = env[":target"].get_driver("core")["type"]
    core = core.replace("cortex-m", "CM").replace("+", "PLUS").replace("f", "").replace("d", "")
    env.collect(":build:cppdefines", "ARM_MATH_{}".format(core))
    env.collect(":build:path.include", "modm/ext/cmsis/dsp")

    env.outbasepath = "modm/ext/cmsis/dsp"
    env.copy("cmsis/CMSIS/DSP/Include/arm_math.h", "arm_math.h")


# ============================ Option Descriptions ============================
descr_unaligned_data = """# Allow unaligned data storage

If the core supports it, this options enables storing data in unaligned memory.
This may reduce data size, but cost some speed.
"""

descr_matrix_sizes = """# Check input/output matrix size

Check the input and output sizes of matrices and return
`ARM_MATH_SIZE_MISMATCH` on failure.
"""

descr_round_floats = """# Round float inputs

Rounds float inputs properly during all conversions.
"""

descr_loop_unroll = """# Loop Unroll

Enables manual loop unrolling in DSP functions.
"""
